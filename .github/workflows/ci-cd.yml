name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  REPO_NAME: payroll-app
  CLUSTER: payroll-app-cluster
  SERVICE: app-service
  CONTAINER: web-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    - run: mvn clean test -B
    - run: mvn clean package -DskipTests -B

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - run: mvn clean package -DskipTests -B
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    - id: login
      uses: aws-actions/amazon-ecr-login@v2
    - id: build
      env:
        REGISTRY: ${{ steps.login.outputs.registry }}
        TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPO_NAME:$TAG .
        docker push $REGISTRY/$REPO_NAME:$TAG
        echo "image=$REGISTRY/$REPO_NAME:$TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
    - name: Deploy
      run: |
        cat > task-def.json << 'EOF'
        {
          "family": "app-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "taskRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "containerDefinitions": [{
            "name": "web-app",
            "image": "${{ needs.build.outputs.image }}",
            "portMappings": [{"containerPort": 8080}],
            "memory": 1024,
            "environment": [
              {"name": "SPRING_PROFILES_ACTIVE", "value": "dev"},
              {"name": "SERVER_PORT", "value": "8080"}
            ],
            "logConfiguration": {
              "logDriver": "awslogs",
              "options": {
                "awslogs-group": "/ecs/payroll-app",
                "awslogs-region": "us-east-1",
                "awslogs-stream-prefix": "ecs"
              }
            }
          }]
        }
        EOF
        
        TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        SG=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
        
        aws ecs run-task \
          --cluster payroll-app-cluster \
          --task-definition $TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG],assignPublicIp=ENABLED}"
        
        echo "Deployment completed"