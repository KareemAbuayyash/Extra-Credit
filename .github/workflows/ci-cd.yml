name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPO: payroll-app
  ECS_CLUSTER_NAME: payroll-app-cluster
  ECS_SERVICE_NAME: payroll-app-task
  APP_CONTAINER_NAME: payroll-app

jobs:
  # ════════════════════════════════════════════════════════
  # BUILD & TEST
  # ════════════════════════════════════════════════════════
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test Suite
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Tests
      run: |
        echo "Running comprehensive test suite..."
        mvn clean test -B
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Application
      run: |
        echo "Building production artifact..."
        mvn clean package -DskipTests -B

  # ════════════════════════════════════════════════════════
  # DOCKER BUILD & PUSH
  # ════════════════════════════════════════════════════════
  build-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    name: Build & Push Container
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image: ${{ steps.build.outputs.image }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build JAR
      run: mvn clean package -DskipTests -B
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build & Push Container
      id: build
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building container image..."
        docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPO:latest .
        
        echo "Pushing to registry..."
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Container published successfully"

  # ════════════════════════════════════════════════════════
  # PRODUCTION DEPLOYMENT
  # ════════════════════════════════════════════════════════
  deploy:
    runs-on: ubuntu-latest
    needs: build-image
    name: Production Deployment
    if: github.ref == 'refs/heads/main'
    
    outputs:
      app-url: ${{ steps.endpoint.outputs.app-url }}
    
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Deploy to ECS
      run: |
        echo "Starting deployment process..."
        
        # Gracefully stop existing tasks
        ACTIVE_TASKS=$(aws ecs list-tasks --cluster payroll-app-cluster --query 'taskArns' --output text)
        if [ "$ACTIVE_TASKS" != "" ]; then
          echo "Stopping existing tasks..."
          for task in $ACTIVE_TASKS; do
            TASK_ID=$(echo $task | cut -d'/' -f3)
            aws ecs stop-task --cluster payroll-app-cluster --task $TASK_ID --reason "New deployment"
          done
          sleep 30
        fi
        
        # Create optimized task definition
        cat > task-definition.json << 'EOF'
        {
          "family": "payroll-app-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "1024",
          "memory": "4096",
          "executionRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "taskRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "containerDefinitions": [
            {
              "name": "payroll-app",
              "image": "${{ needs.build-image.outputs.image }}",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "memory": 4096,
              "environment": [
                {"name": "SPRING_PROFILES_ACTIVE", "value": "dev"},
                {"name": "JAVA_OPTS", "value": "-Xmx1024m -Xms512m -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"},
                {"name": "ENVIRONMENT_PROFILE", "value": "dev"},
                {"name": "SERVER_PORT", "value": "8080"}
              ],
              "healthCheck": {
                "command": [
                  "CMD-SHELL",
                  "curl -f http://localhost:8080/actuator/health || exit 1"
                ],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 120
              },
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/payroll-app",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        
        echo "Deploying with configuration:"
        echo "- Memory: 2GB"
        echo "- CPU: 1 vCPU"
        echo "- Java Heap: 1GB"
        echo "- Health checks enabled"
        
        # Register task definition
        TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "Task definition registered: $TASK_ARN"
        
        # Get network configuration
        DEFAULT_VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        PUBLIC_SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$DEFAULT_VPC Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        SECURITY_GROUP=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
        
        # Launch task
        echo "Launching application..."
        TASK=$(aws ecs run-task \
          --cluster payroll-app-cluster \
          --task-definition $TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$PUBLIC_SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
          
        echo "Task launched: $TASK"
        
        # Wait for deployment
        TASK_ID=$(echo $TASK | cut -d'/' -f3)
        
        for i in {1..20}; do
          STATUS=$(aws ecs describe-tasks --cluster payroll-app-cluster --tasks $TASK_ID --query 'tasks[0].lastStatus' --output text)
          echo "Deployment status ($i/20): $STATUS"
          
          if [ "$STATUS" = "RUNNING" ]; then
            echo "Deployment successful!"
            break
          elif [ "$STATUS" = "STOPPED" ]; then
            echo "Deployment failed - task stopped"
            aws ecs describe-tasks --cluster payroll-app-cluster --tasks $TASK_ID --query 'tasks[0].[stoppedReason,containers[0].exitCode,containers[0].reason]' --output table
            exit 1
          fi
          
          sleep 15
        done

    - name: Get Application URL
      id: endpoint
      run: |
        echo "Discovering application endpoint..."
        
        for attempt in {1..5}; do
          echo "Discovery attempt $attempt/5..."
          
          RUNNING_TASKS=$(aws ecs list-tasks --cluster payroll-app-cluster --desired-status RUNNING --query 'taskArns' --output text)
          
          if [ "$RUNNING_TASKS" != "" ]; then
            CURRENT_TASK=$(echo $RUNNING_TASKS | cut -d' ' -f1)
            TASK_ID=$(echo $CURRENT_TASK | cut -d'/' -f3)
            
            NETWORK_INTERFACE=$(aws ecs describe-tasks --cluster payroll-app-cluster --tasks $TASK_ID --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text 2>/dev/null)
            
            if [ "$NETWORK_INTERFACE" != "" ] && [ "$NETWORK_INTERFACE" != "None" ]; then
              PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null)
              
              if [ "$PUBLIC_IP" != "" ] && [ "$PUBLIC_IP" != "None" ]; then
                echo "Application IP discovered: $PUBLIC_IP"
                break
              fi
            fi
          fi
          
          sleep 10
        done
        
        if [ "$PUBLIC_IP" = "" ] || [ "$PUBLIC_IP" = "None" ]; then
          echo "Failed to discover IP after 5 attempts"
          exit 1
        fi
        
        APP_URL="http://$PUBLIC_IP:8080"
        echo "app-url=$APP_URL" >> $GITHUB_OUTPUT
        
        echo ""
        echo "🎉 DEPLOYMENT COMPLETE!"
        echo ""
        echo "Application URLs:"
        echo "  Main App: $APP_URL"
        echo "  Health Check: $APP_URL/actuator/health"
        echo "  Swagger UI: $APP_URL/api-docs-ui"
        echo "  API Docs: $APP_URL/swagger-ui/index.html"
        echo "  Employees API: $APP_URL/employees"
        echo "  Auth Login: $APP_URL/auth/login"
        echo ""
        
        # Health verification
        echo "Verifying application health..."
        
        for check in {1..10}; do
          echo "Health check $check/10..."
          
          if curl -f -s --connect-timeout 5 --max-time 10 $APP_URL/actuator/health > /dev/null 2>&1; then
            echo "✅ Health check passed!"
            HEALTH_STATUS=$(curl -s $APP_URL/actuator/health 2>/dev/null)
            echo "Health Status: $HEALTH_STATUS"
            break
          else
            if [ $check -eq 10 ]; then
              echo "⚠️ Health check timeout - application may still be starting"
            else
              sleep 15
            fi
          fi
        done
        
        echo "Application deployed successfully!"

  # ════════════════════════════════════════════════════════
  # DEPLOYMENT SUMMARY
  # ════════════════════════════════════════════════════════
  summary:
    runs-on: ubuntu-latest
    needs: [build-image, deploy]
    name: Deployment Summary
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Success Summary
      run: |
        echo ""
        echo "🚀 CI/CD PIPELINE COMPLETED SUCCESSFULLY!"
        echo ""
        echo "Deployment Details:"
        echo "  Container Image: ${{ needs.build-image.outputs.image }}"
        echo "  Live Application: ${{ needs.deploy.outputs.app-url }}"
        echo "  Memory Allocation: 2GB"
        echo "  CPU Allocation: 1 vCPU"
        echo "  Health Monitoring: Enabled"
        echo ""
        echo "Your Spring Boot application is now live and stable!"
        echo "Next push will automatically trigger a new deployment."
        echo ""