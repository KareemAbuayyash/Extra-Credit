name: Bulletproof CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPO: payroll-app
  ECS_CLUSTER_NAME: payroll-app-cluster
  ECS_SERVICE_NAME: payroll-app-task
  APP_CONTAINER_NAME: payroll-app

jobs:
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # PHASE 1: QUALITY ASSURANCE & BUILD
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Tests & Build
      run: |
        mvn clean test -B
        mvn package -DskipTests -B
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        token: ${{ secrets.GITHUB_TOKEN }}

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # PHASE 2: CONTAINER BUILD & DEPLOYMENT
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    name: Bulletproof Deployment
    if: github.ref == 'refs/heads/main'
    
    outputs:
      app-url: ${{ steps.deploy-app.outputs.app-url }}
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Application
      run: mvn clean package -DskipTests -B
      
    - name: AWS Authentication
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: ECR Login
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build & Push Container
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPO:latest .
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO:latest
        echo "container-image=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
      id: build-image
        
    - name: Bulletproof Deployment
      id: deploy-app
      env:
        CONTAINER_IMAGE: ${{ steps.build-image.outputs.container-image }}
      run: |
        echo "üõ°Ô∏è Starting bulletproof deployment..."
        
        # Stop existing tasks gracefully
        ACTIVE_TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --query 'taskArns' --output text)
        if [ "$ACTIVE_TASKS" != "" ]; then
          echo "üîÑ Stopping existing tasks..."
          for task in $ACTIVE_TASKS; do
            TASK_ID=$(echo $task | cut -d'/' -f3)
            aws ecs stop-task --cluster $ECS_CLUSTER_NAME --task $TASK_ID --reason "Deployment upgrade"
          done
          sleep 30
        fi
        
        # Create bulletproof task definition
        cat > task-definition.json << EOF
        {
          "family": "$ECS_SERVICE_NAME",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "1024",
          "memory": "4096",
          "executionRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "taskRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "containerDefinitions": [
            {
              "name": "$APP_CONTAINER_NAME",
              "image": "$CONTAINER_IMAGE",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "memory": 4096,
              "environment": [
                {"name": "SPRING_PROFILES_ACTIVE", "value": "dev"},
                {"name": "JAVA_OPTS", "value": "-Xmx1024m -Xms512m -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"},
                {"name": "SERVER_PORT", "value": "8080"}
              ],
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 120
              },
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/payroll-app",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        
        echo "üõ°Ô∏è Bulletproof config: 4GB memory, 1 vCPU, health checks enabled"
        
        # Register task definition
        TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Get network configuration
        DEFAULT_VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        PUBLIC_SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$DEFAULT_VPC Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        SECURITY_GROUP=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
        
        # Deploy task
        echo "üöÄ Deploying bulletproof application..."
        TASK=$(aws ecs run-task \
          --cluster $ECS_CLUSTER_NAME \
          --task-definition $TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$PUBLIC_SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
          
        echo "‚úÖ Task launched: $TASK"
        
        # Wait for deployment
        TASK_ID=$(echo $TASK | cut -d'/' -f3)
        for i in {1..20}; do
          STATUS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ID --query 'tasks[0].lastStatus' --output text)
          echo "‚è≥ Status ($i/20): $STATUS"
          
          if [ "$STATUS" = "RUNNING" ]; then
            echo "‚úÖ Deployment successful!"
            break
          elif [ "$STATUS" = "STOPPED" ]; then
            echo "‚ùå Task failed"
            aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ID --query 'tasks[0].[stoppedReason,containers[0].exitCode]' --output table
            exit 1
          fi
          sleep 15
        done
        
        # Get application URL
        for attempt in {1..5}; do
          NETWORK_INTERFACE=$(aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ID --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text 2>/dev/null)
          
          if [ "$NETWORK_INTERFACE" != "" ] && [ "$NETWORK_INTERFACE" != "None" ]; then
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $NETWORK_INTERFACE --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null)
            
            if [ "$PUBLIC_IP" != "" ] && [ "$PUBLIC_IP" != "None" ]; then
              APP_URL="http://$PUBLIC_IP:8080"
              echo "app-url=$APP_URL" >> $GITHUB_OUTPUT
              
              echo ""
              echo "üéâ BULLETPROOF DEPLOYMENT SUCCESS!"
              echo "üåü Application URL: $APP_URL"
              echo "‚ù§Ô∏è Health Check: $APP_URL/actuator/health"
              echo "üìö Swagger UI: $APP_URL/swagger-ui/index.html"
              echo "üë• Employee API: $APP_URL/employees"
              echo ""
              echo "üõ°Ô∏è Crash-proof with 4GB memory & health monitoring!"
              
              # Health check
              echo "üè• Performing health check..."
              for health_check in {1..10}; do
                if curl -f -s --connect-timeout 5 --max-time 10 $APP_URL/actuator/health > /dev/null 2>&1; then
                  echo "‚úÖ Health check passed! Application is operational!"
                  break
                else
                  echo "‚è≥ Waiting for app to start ($health_check/10)..."
                  sleep 15
                fi
              done
              
              break
            fi
          fi
          sleep 10
        done