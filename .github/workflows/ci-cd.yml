name: Application Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPO: payroll-app
  ECS_CLUSTER_NAME: payroll-app-cluster
  ECS_SERVICE_NAME: payroll-app-task
  APP_CONTAINER_NAME: payroll-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        
    - name: Run tests
      run: mvn clean test -B
        
    - name: Build application
      run: mvn clean package -DskipTests -B

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Build
      run: mvn clean package -DskipTests -B
      
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push
      id: build
      env:
        REGISTRY: ${{ steps.ecr.outputs.registry }}
        TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO
        
        docker build -t $REGISTRY/$ECR_REPO:$TAG .
        docker push $REGISTRY/$ECR_REPO:$TAG
        echo "image=$REGISTRY/$ECR_REPO:$TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Deploy to ECS
      run: |
        # Stop existing tasks
        TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --query 'taskArns' --output text)
        if [ "$TASKS" != "" ]; then
          for task in $TASKS; do
            TASK_ID=$(echo $task | cut -d'/' -f3)
            aws ecs stop-task --cluster $ECS_CLUSTER_NAME --task $TASK_ID
          done
          sleep 20
        fi
        
        # Create task definition
        cat > task-def.json << EOF
        {
          "family": "$ECS_SERVICE_NAME",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "taskRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "containerDefinitions": [
            {
              "name": "$APP_CONTAINER_NAME",
              "image": "${{ needs.build.outputs.image }}",
              "portMappings": [{"containerPort": 8080}],
              "memory": 1024,
              "environment": [
                {"name": "SPRING_PROFILES_ACTIVE", "value": "dev"},
                {"name": "JAVA_OPTS", "value": "-Xmx512m"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/app",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        
        # Register and run task
        TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        
        # Create or get security group that allows port 8080
        SG=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null)
        if [ "$SG" = "None" ] || [ "$SG" = "" ]; then
          echo "Creating security group..."
          SG=$(aws ec2 create-security-group --group-name payroll-sg --description "Payroll app security group" --vpc-id $VPC --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $SG --protocol tcp --port 8080 --cidr 0.0.0.0/0
          aws ec2 authorize-security-group-ingress --group-id $SG --protocol tcp --port 80 --cidr 0.0.0.0/0
        fi
        
        # Run task with better error handling
        echo "Starting task deployment..."
        TASK_ARN=$(aws ecs run-task \
          --cluster $ECS_CLUSTER_NAME \
          --task-definition $TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
        
        echo "Task started: $TASK_ARN"
        TASK_ID=$(echo $TASK_ARN | cut -d'/' -f3)
        
        # Wait and check task status
        echo "Waiting for task to start..."
        for i in {1..10}; do
          sleep 15
          STATUS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ID --query 'tasks[0].lastStatus' --output text)
          echo "Check $i/10: Task status = $STATUS"
          
          if [ "$STATUS" = "RUNNING" ]; then
            echo "‚úÖ Task is running!"
            break
          elif [ "$STATUS" = "STOPPED" ]; then
            echo "‚ùå Task stopped. Checking reason..."
            aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ID --query 'tasks[0].[stoppedReason,containers[0].exitCode,containers[0].reason]' --output table
            exit 1
          fi
        done
        
        # Wait for task to start and get IP
        echo "Waiting for task to start..."
        sleep 30
        
        # Get running task and its public IP
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --desired-status RUNNING --query 'taskArns[0]' --output text)
        TASK_ID=$(echo $TASK_ARN | cut -d'/' -f3)
        
        # Get network interface
        ENI=$(aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ID --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        
        # Get public IP
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        
        echo "========================================"
        echo "üéâ DEPLOYMENT SUCCESSFUL!"
        echo "========================================"
        echo "üì± Application URL: http://$PUBLIC_IP:8080"
        echo "üìö Swagger UI: http://$PUBLIC_IP:8080/docs"
        echo "üìã API Docs: http://$PUBLIC_IP:8080/api-docs"
        echo "üíæ H2 Database: http://$PUBLIC_IP:8080/h2-console"
        echo "‚ù§Ô∏è Health Check: http://$PUBLIC_IP:8080/actuator/health"
        echo "========================================"