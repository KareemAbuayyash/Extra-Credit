# .github/workflows/workflow.yml
name: Simplified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPO: payroll-app
  ECS_CLUSTER: payroll-app-cluster
  ECS_SERVICE: payroll-app-task

jobs:
  # Step 1: Test & Build
  test-and-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        
    - name: Run Tests
      run: mvn clean test -B
      continue-on-error: true
        
    - name: Package Application
      run: mvn package -DskipTests -B
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: '**/target/surefire-reports/TEST-*.xml'
        reporter: java-junit
        fail-on-error: false

  # Step 2: Build & Push Container
  containerize:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Build App
      run: mvn clean package -DskipTests -B
      
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2
      id: ecr
      
    - name: Build & Push
      id: build
      run: |
        IMAGE=${{ steps.ecr.outputs.registry }}/$ECR_REPO:${{ github.sha }}
        docker build -t $IMAGE .
        docker push $IMAGE
        echo "image=$IMAGE" >> $GITHUB_OUTPUT

  # Step 3: Deploy to ECS
  deploy:
    runs-on: ubuntu-latest
    needs: containerize
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        # Stop existing tasks
        aws ecs list-tasks --cluster $ECS_CLUSTER --query 'taskArns' --output text | \
        xargs -n1 -I{} aws ecs stop-task --cluster $ECS_CLUSTER --task {} || true
        
        # Create task definition
        cat > task-def.json << EOF
        {
          "family": "$ECS_SERVICE",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "1024",
          "memory": "4096",
          "executionRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "taskRoleArn": "arn:aws:iam::562437922263:role/LabRole",
          "containerDefinitions": [{
            "name": "payroll-app",
            "image": "${{ needs.containerize.outputs.image }}",
            "portMappings": [{"containerPort": 8080}],
            "memory": 4096,
            "environment": [
              {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
              {"name": "JAVA_OPTS", "value": "-Xmx2g -Xms1g"},
              {"name": "SERVER_PORT", "value": "8080"}
            ],
            "healthCheck": {
              "command": ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"],
              "interval": 30,
              "timeout": 5,
              "retries": 3,
              "startPeriod": 120
            },
            "logConfiguration": {
              "logDriver": "awslogs",
              "options": {
                "awslogs-group": "/ecs/payroll-app",
                "awslogs-region": "${{ env.AWS_REGION }}",
                "awslogs-stream-prefix": "ecs"
              }
            }
          }]
        }
        EOF
        
        # Register and deploy
        TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Get network config
        VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        SG=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
        
        # Run task
        TASK=$(aws ecs run-task \
          --cluster $ECS_CLUSTER \
          --task-definition $TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
        
        echo "✅ Task deployed: $TASK"
        
        # Wait for running state
        echo "⏳ Waiting for deployment..."
        TASK_ID=$(echo $TASK | cut -d'/' -f3)
        for i in {1..15}; do
          STATUS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ID --query 'tasks[0].lastStatus' --output text)
          echo "Status: $STATUS"
          if [ "$STATUS" = "RUNNING" ]; then
            break
          elif [ "$STATUS" = "STOPPED" ]; then
            echo "❌ Task failed"
            exit 1
          fi
          sleep 20
        done
        
        # Get endpoint
        ENI=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ID --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        
        echo ""
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "🌐 Application URL: http://$IP:8080"
        echo "🏥 Health Check: http://$IP:8080/actuator/health"
        echo "📚 Swagger UI: http://$IP:8080/api-docs-ui"
        echo "👥 Employees API: http://$IP:8080/employees"