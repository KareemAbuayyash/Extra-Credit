# .github/workflows/workflow.yml
name: Bulletproof CI/CD Pipeline - No Crashes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPO: payroll-app
  ECS_CLUSTER_NAME: payroll-app-cluster
  ECS_TASK_FAMILY: payroll-app-task
  APP_CONTAINER_NAME: payroll-app

jobs:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # 1) QUALITY ASSURANCE & TESTING
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  quality-assurance:
    runs-on: ubuntu-latest
    name: Quality Assurance & Testing Suite

    steps:
      - name: Source Code Retrieval
        uses: actions/checkout@v4

      - name: Java 21 Environment Setup
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Maven Dependency Caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Execute Test Suite
        run: |
          echo "Executing comprehensive test suite..."
          mvn clean test -B

      - name: Test Results Publication
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Execution Report
          path: target/surefire-reports/*.xml
          reporter: java-junit
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Application Compilation (skip tests)
        run: |
          echo "Compiling production-ready application..."
          mvn clean package -DskipTests -B

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # 2) CONTAINERIZATION & REGISTRY PUSH
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  containerization:
    needs: quality-assurance
    runs-on: ubuntu-latest
    name: Container Build & Registry Push
    if: github.ref == 'refs/heads/main'

    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}

    steps:
      - name: Source Code Retrieval
        uses: actions/checkout@v4

      - name: Java 21 Environment Setup
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Maven Dependency Caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Production Build (skip tests)
        run: mvn clean package -DskipTests -B

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ECR Registry Login
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:latest

          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPO:latest

          echo "image-uri=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # 3) DEPLOYMENT ‚Üí ECS/Fargate (No Crashes)
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deployment:
    needs: containerization
    runs-on: ubuntu-latest
    name: Bulletproof No-Crash Deployment
    if: github.ref == 'refs/heads/main'

    steps:
      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Discover Default VPC & Public Subnets
        id: discover-network
        run: |
          # 1) Find Default VPC ID
          VPC_ID=$(aws ec2 describe-vpcs \
            --filters "Name=isDefault,Values=true" \
            --query "Vpcs[0].VpcId" --output text)

          # 2) List the first two public subnets
          PUBLIC_SUBNETS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" \
                     "Name=map-public-ip-on-launch,Values=true" \
            --query "Subnets[0:2].SubnetId" \
            --output text | tr '\t' ',')

          echo "subnets=$PUBLIC_SUBNETS" >> $GITHUB_OUTPUT

      - name: Create ECS Task Definition JSON
        run: |
          cat > ecs-task-definition.json << 'EOF'
          {
            "family": "${{ env.ECS_TASK_FAMILY }}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "4096",
            "executionRoleArn": "arn:aws:iam::562437922263:role/LabRole",
            "taskRoleArn": "arn:aws:iam::562437922263:role/LabRole",
            "containerDefinitions": [
              {
                "name": "${{ env.APP_CONTAINER_NAME }}",
                "image": "${{ needs.containerization.outputs.image-uri }}",
                "portMappings": [
                  { "containerPort": 8080, "protocol": "tcp" }
                ],
                "memory": 4096,
                "environment": [
                  { "name": "SPRING_PROFILES_ACTIVE", "value": "prod" },
                  { "name": "JAVA_OPTS", "value": "-Xmx1024m -Xms512m -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0" },
                  { "name": "ENVIRONMENT_PROFILE", "value": "prod" },
                  { "name": "SERVER_PORT", "value": "8080" }
                ],
                "healthCheck": {
                  "command": ["CMD-SHELL","curl -f http://localhost:8080/actuator/health || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3,
                  "startPeriod": 120
                },
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/${{ env.APP_CONTAINER_NAME }}",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF

      - name: Register New ECS Task Definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ Registered Task Definition: $TASK_DEF_ARN"

      - name: Run ECS Task (Fargate)
        run: |
          echo "üöÄ Launching Fargate task..."
          SUBNETS="${{ steps.discover-network.outputs.subnets }}"
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ env.ECS_CLUSTER_NAME }}" \
            --task-definition "${{ steps.register-task.outputs.task-def-arn }}" \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNETS}],securityGroups=[sg-XXXXXX],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' --output text)
          echo "Launched: $TASK_ARN"

      - name: Wait for Task to Reach RUNNING
        run: |
          # Extract only the Task ID portion
          TASK_ID=$(echo "${{ steps.run-ecs.outputs.task-arn }}" | cut -d'/' -f3)
          echo "‚è≥ Checking status of $TASK_ID..."
          for i in {1..20}; do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ env.ECS_CLUSTER_NAME }}" \
              --tasks $TASK_ID \
              --query 'tasks[0].lastStatus' --output text)
            echo "Attempt $i: $STATUS"
            if [ "$STATUS" = "RUNNING" ]; then
              echo "‚úÖ Task is RUNNING"
              break
            fi
            if [ "$STATUS" = "STOPPED" ]; then
              echo "‚ùå Task stopped unexpectedly!"
              exit 1
            fi
            sleep 15
          done

      - name: Deployment Complete
        run: |
          echo "üéâ Deployment complete! Your Spring Boot app is now running in ECS (prod)."
